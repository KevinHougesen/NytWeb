@page "/instagram"
@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@inject IAuthService AuthService
@using InstagramApi

<h1>Instagram Basic Display API</h1>
<hr />


    <MudFab DisableElevation="true" StartIcon="@Icons.Material.Outlined.Home" OnClick="@(async () => AuthenticateInstagram())" MudBlazor.Size="Size.Small" Color="Color.Secondary" Rel="nofollow" Label="Hjem" Width="75%"/>



@code {

    [Parameter]
    public string Code { get; set; }

    private bool hasUserAccessToken = false;
    private string authorizationUrl = "";
    private dynamic user = null; // Using dynamic for simplicity, consider creating a model class
    private string userDetails; // For displaying raw user data

    // OnInitializedAsync runs when the component is being initialized
    protected override async Task OnInitializedAsync()
    {
        // Simulate retrieving access token and user ID, possibly from a user's input or stored credentials
        string accessToken = "AQAKc7q5sbbmksMD4jYQP4_80qksB303E2uGBhkwGnOeGeqIOcUdb_JfehgqOrPR2zw_bFprvXobmKpsFznOELXi9cJFMAjUiw2MIFmpjMDhpnU0fn2mOlbiCd40gZCmYX-s4IXDGDr1tM6GAFah44TvK2DcoE9tNMUgaYGx7mf_R3pIvaj0X98ylgnJmB_69hyMZbO4WfdIfUQekZx6EpinruXZs8_MKrdEUjtjvFnoKg#_";
        var ig = new InstagramBasicDisplayApi(paramsDict);
        
        
        string userId = await ig.FetchUserAccessTokenAsync(accessToken);

        // Initialize API with parameters
        var paramsDict = new Dictionary<string, string>
        {
            {"access_token", userId["access_token"]},
            {"user_id", userId["user_id"]}
        };


        // Check if user is authorized
        hasUserAccessToken = ig.HasUserAccessToken;
        authorizationUrl = await AuthService.AuthInsta();
        Console.WriteLine(hasUserAccessToken);
        if (hasUserAccessToken)
        {
            // Fetch user details and other info as needed
            var userResponse = await ig.GetUserAsync();
            userDetails = JsonConvert.SerializeObject(userResponse); // Or another method to format the response
            user = userResponse; // Assuming the response is properly parsed into a dynamic object or a specific model
            Console.WriteLine(user);
        }
    }

    private async Task AuthenticateInstagram()
    {
        await JSRuntime.InvokeAsync<string>("open", "https://api.instagram.com/" + "oauth/authorize?" + "app_id=1320174152716541&" + "redirect_uri=https://www.ditnyt.dk/" + "scope=user_profile&" + "response_type=code" , "_parent");
    }
}
