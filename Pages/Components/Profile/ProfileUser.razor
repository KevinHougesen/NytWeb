@page "/profile"
@inject IUserService UserService
@inject IPostService PostService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime js

<ProfileAppBar />

<MudPaper Width="100%" Color="Color.Secondary" Class="flex-none" Elevation="0">
    <MudPaper Width="100%" Elevation="0">
        <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0">
            <ProfileHeader Username="@Username" />
            <ProfileActions Username="@Username" />
            <ProfileBioContent />
            <ProfileBioContentActions />
        </MudCard>
    </MudPaper>

    <MudTabs Rounded="true" Elevation="0" Centered="true" Color="@Color.Secondary">
        <MudTabPanel Text="Opslag">
            @if (posts == null)
            {
                <MudText>Der er ingen opslag at vise.</MudText>
            }
            else
            {
                @foreach (var post in posts)
                {
                    <MudPaper Width="100%" Elevation="0">
                        <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0" id="@post.Post.Id">
                            <PostHeader post="@post" />
                            <PostContent post="@post" />
                            <PostFooter post="@post" /> &nbsp; &nbsp; &nbsp; &nbsp;
                        </MudCard>
                        <MudDivider />
                    </MudPaper>
                }
            }
        </MudTabPanel>
        <MudTabPanel Text="Medier">
            <MudGrid Spacing="4">
                @if (!string.IsNullOrEmpty(LongToken))
                {
                    @foreach (var instaPic in mediaUrl)
                    {
                        <MudItem>
                            <MudLink Href="#" Underline="Underline.None">
                                <MudPaper Height="120px" Width="120px">
                                    <MudImage Width="120" Height="120" ObjectFit="ObjectFit.Cover" Src="@instaPic" Elevation="0" Class="rounded-lg" />
                                </MudPaper>
                            </MudLink>
                        </MudItem>
                    }
                }
                @if (posts == null)
                {
                    <MudGrid Spacing="4">
                        @for (int i = 0; i < 8; i++)
                        {
                            <MudItem>
                                <MudPaper Height="120px" Width="120px" />
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    @foreach (var post in posts)
                    {
                        if (!string.IsNullOrEmpty(post.Post.PicturePath))
                        {
                            <MudItem>
                                <MudLink Href="#" Underline="Underline.None">
                                    <MudPaper Height="120px" Width="120px">
                                        <MudImage Width="120" Height="120" ObjectFit="ObjectFit.Cover" Src="@post.Post.PicturePath" Elevation="0" Class="rounded-lg" />
                                    </MudPaper>
                                </MudLink>
                            </MudItem>
                        }
                    }
                }
            </MudGrid>
        </MudTabPanel>
    </MudTabs>

    <MudSpacer />
</MudPaper>

@code
{
    [Parameter]
    public string Username { get; set; }

    List<string> Followers;
    List<string> Following;
    List<PostDetails> posts;
    
    List<InstagramMediaData> medias { get; set; } = new();
    List<InstagramMediaData> albumMedias { get; set; } = new();
    List<string> mediaUrl { get; set; } = new();
    UserModel user;
    string LongToken;

    public bool Liked { get; set; }
    public bool Follows { get; set; }

    private int currentPage = 0;
    private int pageSize = 15;
    private int totalPosts = 100;

    private int Likes;
    private int Shares;

    private bool isVisible;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        Username = authState.User.Identity.Name;

        user = await UserService.GetUserAsync(Username);

        

        Followers = await UserService.GetUserFollowersAsync(Username);
        Following = await UserService.GetUserFollowingAsync(Username);
        
        posts = await PostService.GetUserPostsAsync(Username);  
        totalPosts = posts.Count();  

        if (!string.IsNullOrEmpty(user.InstaToken))
        {
            LongToken = user.InstaToken;
            Console.WriteLine($"User Token: {LongToken}");
            await GetMediaAsync();
        };

        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var code = query.Get("code");

        if (!string.IsNullOrEmpty(code))
        {
            // Code found, now you can store it or use it

            Console.WriteLine($"Instagram code: {code}");

            var token = await UserService.GetUserInstaTokenAsync(code);
            var Token = token.AccessToken;
            Console.WriteLine("Short Token: " + Token);

            var longToken = await UserService.GetUserInstaLongTokenAsync(Token);
            LongToken = longToken.AccessToken;
            Console.WriteLine("Long Token: " + LongToken);

            await UserService.UpdateInstaTokenAsync(Username, LongToken);
            
            var MediaContent = await UserService.GetUserInstaMediaAsync(LongToken);

            foreach (var media in MediaContent.Data)
            {
                Console.WriteLine($"ID: {media.Id}, Caption: {media.Caption}");
                var Medias = await UserService.GetUserInstaMediaDataAsync(media.Id, LongToken);
                medias.Add(Medias);
            };

            await GetMediaContent();
            
        };
        
    }

    private async Task GetMediaAsync()
    {
        if (!string.IsNullOrEmpty(LongToken))
        {
            var MediaContent = await UserService.GetUserInstaMediaAsync(user.InstaToken);
            foreach (var media in MediaContent.Data)
            {
                Console.WriteLine($"ID: {media.Id}, Caption: {media.Caption}");
                var Medias = await UserService.GetUserInstaMediaDataAsync(media.Id, user.InstaToken);
                medias.Add(Medias);
                
            };
            await GetMediaContent();
        };
    }

    private async Task GetMediaContent()
    {
        foreach ( var file in medias )
        {
            if (file.MediaType == "CAROUSEL_ALBUM")
            {
                var albumContent = await UserService.GetUserInstaMediaAlbumChildrenAsync(file.Id, LongToken);
                
                var AlbumMedias = await UserService.GetUserInstaMediaDataAsync(albumContent.Data[0].Id, LongToken);
                albumMedias.Add(AlbumMedias);
                foreach ( var photo in albumMedias )
                {
                    string fixedUrl = photo.MediaUrl.Replace("\\/", "/");
                    mediaUrl.Add(fixedUrl);
                    Console.WriteLine("Link:" + fixedUrl);
                };
            };

            if (file.MediaType == "IMAGE")
            {
                mediaUrl.Add(file.MediaUrl);
            };
        };
        
    }
    
    private void OnPageChanged(int page)
    {
        currentPage = page - 1; // MudBlazor is 1-based for pages, so we subtract 1 to make it 0-based.
        StateHasChanged(); // Re-render the component with the new page.
    }

    

    public void OpenOverlay()
    {
        isVisible = true;
        StateHasChanged();
    }

    private bool showFullContent;

    private void ToggleContent()
    {
        showFullContent = !showFullContent;
    }

    private string GetReadMoreText()
    {
        return showFullContent ? "Læs mindre" : "Læs mere";
    }





}