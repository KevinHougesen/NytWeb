@using FluentValidation
@using Severity = MudBlazor.Severity
@using FileManager
@using Microsoft.AspNetCore.SignalR.Client
@using Azure.Messaging.WebPubSub.Clients
@inject NavigationManager NavigationManager
@inject IPostService PostService
@inject IBlobService BlobService
@inject IUserService UserService
@inject IAuthService AuthService
@inject IJSRuntime js
@inject ISnackbar Snackbar

<MudCard Elevation="0" Width="100%">
    <MudForm Model="@model" @ref="form" Validation="ValidationRules.ValidateValue" ValidationDelay="0" Width="100%">
        <PostCreateHeader />
        <PostCreateContent Model="@model" />
        <PostCreateAction Model="@model" OnSubmit="HandleSubmit" />
    </MudForm>
</MudCard>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private MudForm form;
    private FileModel model = new();
    private bool success;
    private FileModelFluentValidator ValidationRules = new();
    private bool SuppressOnChangeWhenInvalid;

    private string Username;
    private int maxAllowedSize = 10 * 1024 * 1024; // 10 MB
    private List<string> userCommunities;
    private List<GroupDataMessage> messages = new();

    private WebPubSubClient? client = null;
    private string url = string.Empty;
    private string errorMessage = string.Empty;
    private string status = "Not connected.";
    private string connectionId = string.Empty;
    private string userId = string.Empty;
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        Username = authState.User.Identity.Name;
        userCommunities = await UserService.GetUserCommunitiesAsync(Username);
        await Connect();
    }

    private async Task Connect()
    {
        // Implement connection logic here...
    }

    private async Task SendMessage()
    {
        // Implement send message logic here...
    }

    private async Task HandleSubmit()
    {
        await form.Validate();
        Console.WriteLine("Form Validation");

        if (form.IsValid)
        {
            string blobUrl = null;
            if (model.File != null)
            {
                Console.WriteLine("Image is attached");
                try
                {
                    Console.WriteLine("Trying to upload...");
                    var stream = model.File.OpenReadStream(maxAllowedSize);
                    blobUrl = await BlobService.UploadBlobFilesAsync(stream, model.File.Name, model.File.ContentType, Username);
                    Snackbar.Add($"File uploaded successfully: {blobUrl}", Severity.Success);
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error during file upload: {ex.Message}", Severity.Error);
                    return; // Abort the submit if file upload fails
                }
            }

            if (string.IsNullOrEmpty(blobUrl))
            {
                blobUrl = "";
                Console.WriteLine("No Image Attached.");
            }

            if (string.IsNullOrEmpty(model.Content))
            {
                model.Content = " ";
                Console.WriteLine("Image Attached.");
            }

            // Now create the post with the blobUrl
            Console.WriteLine("Creating Post");
            var createdPost = await PostService.CreatePostAsync(Username, model.Content, blobUrl);
            if (createdPost != null)
            {
                var PostId = createdPost;
                Console.WriteLine(PostId);
                //await hubConnection.InvokeAsync("NotifyNewPost", PostId);
                try
                {
                    await client.SendToGroupAsync(userCommunities[0], BinaryData.FromString(model.Content), WebPubSubDataType.Text);
                    Console.WriteLine(PostId);
                    StateHasChanged();
                }
                catch (SendMessageFailedException ex)
                {
                    errorMessage = ex.Message;
                }
                catch (Exception ex)
                {
                    errorMessage = ex.Message;
                }
            }
        }
    }

    public class FileModelFluentValidator : AbstractValidator<FileModel>
    {
        public FileModelFluentValidator()
        {
            RuleFor(x => x.Content).NotEmpty().WithMessage("Content is required").Length(1, 999);
            When(x => x.File != null, () =>
            {
                RuleFor(x => x.File.Size).LessThanOrEqualTo(10 * 1024 * 1024).WithMessage("The maximum file size is 10 MB");
            });
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<FileModel>.CreateWithOptions((FileModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }


}