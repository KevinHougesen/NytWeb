@inject IUserService UserService
@inject IPostService PostService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IModalService modal
@inject IDialogService DialogService
@using Microsoft.AspNetCore.SignalR.Client
@using Azure.Messaging.WebPubSub
@using Websocket.Client
@using Azure.Messaging.WebPubSub.Clients


@if (user == null)
{
    <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
        <MudStack Spacing="8">
            <LoadingPost />
            <LoadingPost />
        </MudStack>
    </MudContainer>
}
else
{
    @if (posts == null)
    {
        <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
            <MudStack Spacing="8">
                <LoadingPost />
                <LoadingPost />
            </MudStack>
        </MudContainer>
    }
    else
    {

        @if(messages.Count == 0)
        {
            <p>No message received yet.</p>
        }
        else
        {
            @foreach (var message in messages)
            {

                <MudPaper Width="100%" Class="flex-none" Elevation="0">
            <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
            
                <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0" >
                    <MudCardHeader>

                                <CardHeaderAvatar>

                                        <MudTooltip Delay="200" Color="Color.Transparent">
                                            <ChildContent>
                                                <MudAvatar MudBlazor.Size="Size.Medium" Image="../../Images/pain.png" />

                                            </ChildContent>
                                            <TooltipContent>


                                                    <MudAvatar Style="height:240px; width:240px;" Image="../../Images/pain.png" />

                                            </TooltipContent>
                                        </MudTooltip>

                                </CardHeaderAvatar>
                                <CardHeaderContent>

                                        

                                                <MudTooltip Delay="200" Color="Color.Secondary" Arrow="true" MudBlazor.Placement="Placement.Right">
                                                    <ChildContent>
                                                        <MudIconButton Color="Color.Tertiary" Edge="Edge.False" Variant="Variant.Text" OnClick="@(async () => GoToProfile(message.FromUserId))">
                                                            <MudStack Justify="Justify.Center" Spacing="0">
                                                                <b>@message.FromUserId</b>
                                                                &#64;@message.FromUserId
                                                            </MudStack>
                                                        </MudIconButton>

                                                    </ChildContent>
                                                    <TooltipContent>
                                                        <MudCard Width="100%" Height="100%" Elevation="0" >
                                                            <MudCardHeader>
                                                                <CardHeaderAvatar>
                                                                    <MudAvatar>
                                                                        <MudImage Src="../../Images/pain.png"></MudImage>
                                                                    </MudAvatar>
                                                                </CardHeaderAvatar>
                                                                <CardHeaderContent>
                                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Info" Bordered="true" Icon="@Icons.Material.Filled.Star">
                                                                        <MudText Typo="Typo.body1">@message.FromUserId &nbsp;</MudText>
                                                                    </MudBadge>
                                                                    <MudText Typo="Typo.body2">&#64;@message.FromUserId</MudText>
                                                                    <MudText Typo="Typo.body2">The moon reflects your explicit beautyüåí<br/>And if you die.. I want to die with you &#64;dead.pretty_222‚ù§Ô∏è‚Äçüî•<br/>Creative Director &#64;a1media.dk </MudText>
                                                                </CardHeaderContent>
                                                            </MudCardHeader>
                                                        </MudCard>
                                                    </TooltipContent>
                                                </MudTooltip>
                                                <MudIcon Icon="@Icons.Material.Filled.Verified" MudBlazor.Size="Size.Small" Color="Color.Primary" Title="Verified User" /> 
                                                &nbsp;

                                        


                                </CardHeaderContent>
                        <CardHeaderActions>

                                    
                                <MudToggleIconButton 
                                    Toggled="@Follows" 
                                    ToggledChanged="@(toggled => OnFollowChanged(message.FromUserId, toggled))"
                                    Icon="@Icons.Material.Filled.AddCircleOutline" 
                                    Color="@Color.Secondary" 
                                    Variant="Variant.Filled" 
                                    Title="F√∏lg" 
                                    ToggledIcon="@Icons.Material.Filled.CheckCircle" 
                                    ToggledColor="@Color.Primary" 
                                    ToggledTitle="F√∏lger" />
                                
                                    
                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                        @if (!string.IsNullOrEmpty("post.Post.PicturePath"))
                        {
                            <MudCardMedia ObjectFit="ObjectFit.Contain" Image="cturePath" />
                            @if (!string.IsNullOrEmpty(@message.Data.ToString()))
                            {
                                <MudText Style="white-space: pre-wrap;" Color="Color.Tertiary" Typo="Typo.caption">
                                    <b>@message.FromUserId</b> 
                                </MudText>
                                <MudText Style="white-space: pre-wrap;" Color="Color.Tertiary" Typo="Typo.caption">
                                    @message.Data.ToString()

                                </MudText>

                                
                            }
                            else
                            {
                                <MudText Typo="Typo.body2"></MudText>
                            }
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty("post.Post.Content"))
                            {
                                <MudSpacer />
                                @if (!string.IsNullOrEmpty("post.Post.Content"))
                                {
                                    <MudText Style="white-space: pre-wrap;" Color="Color.Tertiary" Typo="Typo.caption">
                                    @message.Data.ToString()

                                    </MudText>
                                }
                            }
                        }
  
                    <MudCardActions>

                        <MudText Typo="Typo.body2">4</MudText>
                                <MudToggleIconButton 
                                    Toggled="Liked" 

                                    Icon="@Icons.Material.Filled.FavoriteBorder" 
                                    Color="@Color.Primary" 
                                    Title="Like" 
                                    ToggledIcon="@Icons.Material.Outlined.Favorite" 
                                    ToggledColor="@Color.Primary" 
                                    ToggledTitle="Liked" /> &nbsp; &nbsp; &nbsp; &nbsp;

                        <MudText Typo="Typo.body2">0</MudText>
                        <MudToggleIconButton 
                                    Toggled="Liked" 

                                    Icon="@Icons.Material.Outlined.Repeat" 
                                    Color="@Color.Default" 
                                    Title="Like" 
                                    ToggledIcon="@Icons.Material.Outlined.Repeat" 
                                    ToggledColor="@Color.Warning" 
                                    ToggledTitle="Reposted" /> &nbsp; &nbsp; &nbsp; &nbsp;

                        <MudText Typo="Typo.body2">4</MudText>
                        <MudIconButton Icon="@Icons.Material.Outlined.Comment" OnClick="@((e) => OpenPost(message.FromUserId))" Color="Color.Info" /> &nbsp; &nbsp; &nbsp; &nbsp;

                    </MudCardActions>
                </MudCard>
            </MudContainer>
            <MudDivider />
        </MudPaper>
        <MudSpacer />
            }
        }

        @foreach (var post in posts)
        {

            <MudPaper Width="100%" Class="flex-none" Elevation="0">
            <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
            
                <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0" >
                    <MudCardHeader>

                                <CardHeaderAvatar>

                                        <MudTooltip Delay="200" Color="Color.Transparent">
                                            <ChildContent>
                                                <MudAvatar MudBlazor.Size="Size.Medium" Image="../../Images/pain.png" />

                                            </ChildContent>
                                            <TooltipContent>


                                                    <MudAvatar Style="height:240px; width:240px;" Image="../../Images/pain.png" />

                                            </TooltipContent>
                                        </MudTooltip>

                                </CardHeaderAvatar>
                                <CardHeaderContent>

                                        

                                                <MudTooltip Delay="200" Color="Color.Secondary" Arrow="true" MudBlazor.Placement="Placement.Right">
                                                    <ChildContent>
                                                        <MudIconButton Color="Color.Tertiary" Edge="Edge.False" Variant="Variant.Text" OnClick="@(async () => GoToProfile(post.PostCreatorUsername))">
                                                            <MudStack Justify="Justify.Center" Spacing="0">
                                                                <b>@post.PostCreatorDisplayName</b>
                                                                &#64;@post.PostCreatorUsername
                                                            </MudStack>
                                                        </MudIconButton>

                                                    </ChildContent>
                                                    <TooltipContent>
                                                        <MudCard Width="100%" Height="100%" Elevation="0" >
                                                            <MudCardHeader>
                                                                <CardHeaderAvatar>
                                                                    <MudAvatar>
                                                                        <MudImage Src="../../Images/pain.png"></MudImage>
                                                                    </MudAvatar>
                                                                </CardHeaderAvatar>
                                                                <CardHeaderContent>
                                                                    <MudBadge Origin="Origin.CenterRight" Color="Color.Info" Bordered="true" Icon="@Icons.Material.Filled.Star">
                                                                        <MudText Typo="Typo.body1">@post.PostCreatorDisplayName &nbsp;</MudText>
                                                                    </MudBadge>
                                                                    <MudText Typo="Typo.body2">&#64;@post.PostCreatorUsername</MudText>
                                                                    <MudText Typo="Typo.body2">The moon reflects your explicit beautyüåí<br/>And if you die.. I want to die with you &#64;dead.pretty_222‚ù§Ô∏è‚Äçüî•<br/>Creative Director &#64;a1media.dk </MudText>
                                                                </CardHeaderContent>
                                                            </MudCardHeader>
                                                        </MudCard>
                                                    </TooltipContent>
                                                </MudTooltip>
                                                <MudIcon Icon="@Icons.Material.Filled.Verified" MudBlazor.Size="Size.Small" Color="Color.Primary" Title="Verified User" /> 
                                                &nbsp;

                                        


                                </CardHeaderContent>
                        <CardHeaderActions>

                                    
                                <MudToggleIconButton 
                                    Toggled="@Follows" 
                                    ToggledChanged="@(toggled => OnFollowChanged(post.PostCreatorUsername, toggled))"
                                    Icon="@Icons.Material.Filled.AddCircleOutline" 
                                    Color="@Color.Secondary" 
                                    Variant="Variant.Filled" 
                                    Title="F√∏lg" 
                                    ToggledIcon="@Icons.Material.Filled.CheckCircle" 
                                    ToggledColor="@Color.Primary" 
                                    ToggledTitle="F√∏lger" />
                                
                                    
                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                        @if (!string.IsNullOrEmpty(post.Post.PicturePath))
                        {
                            <MudCardMedia ObjectFit="ObjectFit.Contain" Height="640" Image="@post.Post.PicturePath" />
                            @if (!string.IsNullOrEmpty(post.Post.Content))
                            {
                                <MudText Style="white-space: pre-wrap;" Color="Color.Tertiary" Typo="Typo.caption">
                                    <b>@post.PostCreatorUsername</b> 
                                </MudText>
                                <MudText Style="white-space: pre-wrap;" Color="Color.Tertiary" Typo="Typo.caption">
                                    @{
                                        var displayContent = showFullContent || post.Post.Content.Length <= 200
                                            ? post.Post.Content
                                            : post.Post.Content.Substring(0, 200) + "... ";
                                        @displayContent
                                    }

                                    @if (post.Post.Content.Length > 200)
                                    {
                                        <span @onclick="ToggleContent">@GetReadMoreText()</span>
                                    }
                                </MudText>

                                
                            }
                            else
                            {
                                <MudText Typo="Typo.body2"></MudText>
                            }
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(post.Post.Content))
                            {
                                <MudSpacer />
                                @if (!string.IsNullOrEmpty(post.Post.Content))
                                {
                                    <MudText Style="white-space: pre-wrap;" Color="Color.Tertiary" Typo="Typo.caption">
                                    @{
                                        var displayContent = showFullContent || post.Post.Content.Length <= 200 
                                            ? post.Post.Content 
                                            : post.Post.Content.Substring(0, 200) + "... ";

                                        @displayContent
                                    }
                                    @if (post.Post.Content.Length > 200)
                                    {
                                        <span @onclick="ToggleContent">@GetReadMoreText()</span> 
                                    }

                                    </MudText>
                                }
                            }
                        }
  
                    <MudCardActions>

                        <MudText Typo="Typo.body2">@post.LikedBy.Count()</MudText>
                                <MudToggleIconButton 
                                    Toggled="@post.LikedBy.Contains(Username)" 
                                    ToggledChanged="@(toggled => OnToggledChanged(post, toggled))"
                                    Icon="@Icons.Material.Filled.FavoriteBorder" 
                                    Color="@Color.Primary" 
                                    Title="Like" 
                                    ToggledIcon="@Icons.Material.Outlined.Favorite" 
                                    ToggledColor="@Color.Primary" 
                                    ToggledTitle="Liked" /> &nbsp; &nbsp; &nbsp; &nbsp;

                        <MudText Typo="Typo.body2">@post.RepostedBy.Count()</MudText>
                        <MudToggleIconButton 
                                    Toggled="@post.RepostedBy.Contains(Username)" 
                                    ToggledChanged="@(toggled => OnRepostedChanged(post, toggled))"
                                    Icon="@Icons.Material.Outlined.Repeat" 
                                    Color="@Color.Default" 
                                    Title="Like" 
                                    ToggledIcon="@Icons.Material.Outlined.Repeat" 
                                    ToggledColor="@Color.Warning" 
                                    ToggledTitle="Reposted" /> &nbsp; &nbsp; &nbsp; &nbsp;

                        <MudText Typo="Typo.body2">@post.RepostedBy.Count()</MudText>
                        <MudIconButton Icon="@Icons.Material.Outlined.Comment" OnClick="@((e) => OpenPost(post.Post.Id))" Color="Color.Info" /> &nbsp; &nbsp; &nbsp; &nbsp;

                    </MudCardActions>
                </MudCard>
            </MudContainer>
            <MudDivider />
        </MudPaper>
        <MudSpacer />
        
        }
    }
}


@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [CascadingParameter] 
    IModalService Modal { get; set; } = default!;

    async Task OpenPost(string postId)
    {
        var parameters = new DialogParameters<SinglePost> { { SinglePost => SinglePost.PostId, postId } };

        var dialog = await DialogService.ShowAsync<SinglePost>("", parameters);
        var result = await dialog.Result;
    }

    async Task ShowPostModal(string postid)
    {
        var parameters = new ModalParameters
        {
            { nameof(SinglePost.PostId), postid }
        };

        var options = new ModalOptions() 
        { 
            UseCustomLayout = true,

            AnimationType = ModalAnimationType.FadeInOut
        };

        Modal.Show<SinglePost>("Passing Data", parameters, options);

    }

    private bool showFullContent;
    

    string postId;

    private void ToggleContent()
    {
        showFullContent = !showFullContent;
    }

    private string GetReadMoreText()
    {
        return showFullContent ? "L√¶s mindre" : "L√¶s mere";
    }



    
    private UserModel user;

    private HubConnection? hubConnection;

    private string url = string.Empty;
    private string errorMessage = string.Empty;
    private string status = "Not connected.";
    private string connectionId = string.Empty;
    private string userId = string.Empty;
    private string message = string.Empty;
    private WebPubSubClient? client = null;
    private List<GroupDataMessage> messages = new();

    

    
    private List<PostDetails> posts;

    private List<string> Following;

    private string Username;
    public bool Liked { get; set; }
    public bool Follows { get; set; }

    private int Likes;

    private int Shares;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        user = await UserService.GetUserAsync(authState.User.Identity.Name);
        Username = user.Username;

        await Connect();

        

        if (user != null)
        {
            posts = await PostService.DisplayFeedAsync(user.Username);

            Following = await UserService.GetUserFollowingAsync(user.Username);
            
   


            // Join groups after the connection is established
            var userCommunities = await UserService.GetUserCommunitiesAsync(authState.User.Identity.Name);
            foreach (var community in userCommunities)
            {
                Console.WriteLine("Community: " + community);
            }
        }
    }

    private async Task Connect()
    {
        if (client != null)
        {
            await client.DisposeAsync();
            client = null;
        }
        errorMessage = string.Empty;
        status = "Not connected.";
        connectionId = string.Empty;
        userId = string.Empty;
        messages.Clear();
        var uri = await AuthService.ConnectToHub(Username);

        client = new WebPubSubClient(new Uri(uri));
        client.Connected += args =>
        {
            status = "Connected.";
            connectionId = args.ConnectionId;
            userId = args.UserId;
            StateHasChanged();
            return Task.CompletedTask;
        };
        client.GroupMessageReceived += args =>
        {
            Console.WriteLine($"Message received: {args.Message.ToString()} count = {messages.Count()}");
            messages.Add(args.Message);
            InvokeAsync(StateHasChanged);
            StateHasChanged();
            return Task.CompletedTask;
        };
        client.Disconnected += args =>
        {
            status = "Not connected.";
            connectionId = string.Empty;
            userId = string.Empty;
            StateHasChanged();
            return Task.CompletedTask;
        };
        status = "Connecting ...";
        StateHasChanged();
        try
        {
            await client.StartAsync();
            try
            {
                await client.JoinGroupAsync("Sample_ChatApp");
                Console.WriteLine("Joined Sample_ChatApp");
                StateHasChanged();
            }
            catch (SendMessageFailedException ex)
            {
                errorMessage = ex.Message;
                status = "Not connected.";
                _ = client.StopAsync();
                StateHasChanged();
                throw;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            status = "Not connected.";
            Console.WriteLine("failed");
            Console.WriteLine(errorMessage);
        }
    }


    private void OnPostLiked(string postId, bool liked)
    {
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (liked && !post.LikedBy.Contains(Username))
            {
                post.LikedBy.Add(Username);
            }
            else if (!liked && post.LikedBy.Contains(Username))
            {
                post.LikedBy.Remove(Username);
            }

            StateHasChanged();
        }
    }

    public async Task OnToggledChanged(PostDetails post, bool toggled)
    {
        Console.WriteLine("OnToggledChanged called: " + toggled);
        if (toggled)
        {
            if (!post.LikedBy.Contains(Username))
            {
                post.LikedBy.Add(Username);
                await LikePost(post.Post.Id, true);
            }
        }
        else
        {
            if (post.LikedBy.Contains(Username))
            {
                post.LikedBy.Remove(Username);
                await LikePost(post.Post.Id, false);
            }
        }

        StateHasChanged();
    }

    public async Task OnRepostedChanged(PostDetails post, bool toggled)
    {
        Console.WriteLine("OnToggledChanged called: " + toggled);
        if (toggled)
        {
            if (!post.RepostedBy.Contains(Username))
            {
                post.RepostedBy.Add(Username);
                await RepostPost(post.Post.Id, true);
            }
        }
        else
        {
            if (post.RepostedBy.Contains(Username))
            {
                post.RepostedBy.Remove(Username);
                await RepostPost(post.Post.Id, false);
            }
        }

        StateHasChanged();
    }

    public async Task OnFollowChanged(string user, bool toggled)
    {
        
        {
            if (!Following.Contains(user))
            {
                Following.Add(user);
                Follows = Following.Contains(user);
                await FollowUser(user, true);
            }
            else
            {
                Following.Remove(user);
                Follows = Following.Contains(user);
                await FollowUser(user, false);
            }

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }

        StateHasChanged();
    }


    private async Task LikePost(string postId, bool like)
    {
        Console.WriteLine($"Calling LikePost service: PostId = {postId}, Like = {like}");
        var likeStatusChanged = await PostService.OnLikePost(Username, postId);
        Console.WriteLine($"Like status changed: {likeStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyPostLiked", postId, likeStatusChanged);
    }

    private async Task RepostPost(string postId, bool repost)
    {
        Console.WriteLine($"Calling LikePost service: PostId = {postId}, Repost = {repost}");
        var repostStatusChanged = await PostService.OnSharePost(Username, postId);
        Console.WriteLine($"Repost status changed: {repostStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyPostReposted", postId, repostStatusChanged);
    }

    private async Task FollowUser(string userId, bool follow)
    {
        Console.WriteLine($"Calling LikePost service: UserId = {userId}, follow = {follow}");
        var followStatusChanged = await UserService.FollowUserAsync(Username, userId);
        Console.WriteLine($"Follow status changed: {followStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyNewFollower", userId, follow);
    }

   

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private void UpdatePostLikeStatus(string postId, bool liked)
    {
        // Find the post in the posts list and update its like status
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (liked && !post.LikedBy.Contains(Username))
                post.LikedBy.Add(Username);
            else if (!liked)
                post.LikedBy.Remove(Username);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }

    private void UpdatePostRepostStatus(string postId, bool repost)
    {
        // Find the post in the posts list and update its like status
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (repost && !post.RepostedBy.Contains(Username))
                post.RepostedBy.Add(Username);
            else if (!repost)
                post.RepostedBy.Remove(Username);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }


    private async Task UpdateFeedWithNewPost(string PostId)
    {
        Console.WriteLine("===" + PostId);
        var newPost = await PostService.GetPostByIdAsync(PostId);
        Console.WriteLine(newPost.PostCreatorUsername);
        Console.WriteLine(newPost.Post.Content);
        if (newPost != null)
        {
            posts.Insert(0, newPost);
            Console.WriteLine(newPost.Post.Content);
            InvokeAsync(StateHasChanged);
            //StateHasChanged();
        }
    }

    private async Task UpdateNewFollowerStatus(string userId, bool follow)
    {
        // Find the post in the posts list and update its like status
        var user = userId;
        if (user != null)
        {
            if (follow && !Following.Contains(userId))
                Following.Add(userId);
            else if (!follow)
                Following.Remove(userId);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }



    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
    private async Task GoToPost(string postId)
    {
        NavigationManager.NavigateTo($"/p/{postId}");
    }

    private async Task GoToProfile(string username)
    {
        NavigationManager.NavigateTo($"/u/{username}");
    }
 
    
}