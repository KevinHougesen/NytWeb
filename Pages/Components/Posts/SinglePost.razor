@inject IUserService UserService
@inject IPostService PostService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.SignalR.Client
@using Azure.Messaging.WebPubSub
@using Websocket.Client
@using Azure.Messaging.WebPubSub.Clients
@page "/p/{PostId}"

<MudDialog>
    <DialogContent>
            
                <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Large" Width="100%" >
                    <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
                        <RootReplies PostId="@PostId" />
                    </MudContainer>

                @if (post == null)
                {
                    <MudPaper Width="100%" Class="flex-none" Elevation="0">
                        <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
                            <LoadingPost />
                        </MudContainer>
                    </MudPaper>
                }

                else
                {
                        /* MAIN POST */
                        <div @ref="MainPostSection" >
                        </div>
                
                        
                                <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Medium" Width="100%" >
                                    <MudPaper Width="100%" Elevation="0">
                                        <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0" id="@post.Post.Id" >

                                            <PostHeader post="@post" />
                                                
                                            <PostContent post="@post" />
                                        
                                            <PostFooter post="@post" /> &nbsp; &nbsp; &nbsp; &nbsp;

                                        </MudCard>
                                    </MudPaper>
                                </MudContainer>
                
                        
                }

                <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
                    <PostReplies PostId="@PostId" />
                </MudContainer>

                <MudDivider />
                <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
                    <MudPaper Elevation="0" Width="100%">
                        <MudCard Elevation="0" Width="100%">
                            <PostReply PostId="@PostId" />
                        </MudCard>
                    </MudPaper>
                </MudContainer>
                </MudContainer>

    </DialogContent>
</MudDialog>








@code
{

    [Parameter] 
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(true));
    private async Task Cancel() => await BlazoredModal.CancelAsync();

    [Parameter]
    public string PostId { get; set; }

    ElementReference MainPostSection { get; set; }
    List<Func<Task>> AfterRenderAsyncJobs = new();

    bool IsDisplayed = true;
    
    private PostDetails post;
    private List<PostDetails> posts;

    private List<string> Following;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        post = await PostService.GetPostByIdAsync(PostId);

        var authState = await authenticationState;
        Username = authState.User.Identity.Name;
        userCommunities = await UserService.GetUserCommunitiesAsync(Username);

        

        await Connect();

        if (post.PostType != "root")
        {
            AfterRenderAsyncJobs.Add(ScrollToAddSection);
            StateHasChanged();
        }

        
        



        Console.WriteLine(post.PostType);

        return;
    } 

    

    private async Task ScrollToAddSection() {
        await JsRuntime.InvokeVoidAsync("ScrollElementIntoView", MainPostSection);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        while (AfterRenderAsyncJobs.Any()) {
            var job = AfterRenderAsyncJobs.First();
            AfterRenderAsyncJobs.Remove(job);
            await job.Invoke();
        }
    }

    private string url = string.Empty;
    private string errorMessage = string.Empty;
    private string status = "Not connected.";
    private string connectionId = string.Empty;
    private string userId = string.Empty;
    private string message = string.Empty;
    private WebPubSubClient? client = null;
    private List<GroupDataMessage> messages = new();

    private List<string> userCommunities;

    private string Username;
    public bool Liked { get; set; }
    public bool Follows { get; set; }

    private int Likes;
    private int Shares;

    private async Task Connect()
    {
        if (client != null)
        {
            await client.DisposeAsync();
            client = null;
        }
        errorMessage = string.Empty;
        status = "Not connected.";
        connectionId = string.Empty;
        userId = string.Empty;
        messages.Clear();
        var uri = await AuthService.ConnectToHub(Username, userCommunities);

        client = new WebPubSubClient(new Uri(uri));
        client.Connected += args =>
        {
            status = "Connected.";
            connectionId = args.ConnectionId;
            userId = args.UserId;
            StateHasChanged();
            return Task.CompletedTask;
        };
        client.GroupMessageReceived += args =>
        {
            Console.WriteLine($"Message received: {args.Message.ToString()} count = {messages.Count()}");
            messages.Add(args.Message);
            InvokeAsync(StateHasChanged);
            StateHasChanged();
            return Task.CompletedTask;
        };
        client.Disconnected += args =>
        {
            status = "Not connected.";
            connectionId = string.Empty;
            userId = string.Empty;
            StateHasChanged();
            return Task.CompletedTask;
        };
        status = "Connecting ...";
        StateHasChanged();
        try
        {
            await client.StartAsync();
            try
            {
                foreach (var community in userCommunities)
                {
                    Console.WriteLine("Community: " + community);
                }

                await client.JoinGroupAsync(userCommunities[0]);
                Console.WriteLine($"Joined {userCommunities[0]}");

                await client.JoinGroupAsync(userCommunities[1]);
                Console.WriteLine($"Joined {userCommunities[1]}");

                await client.JoinGroupAsync(userCommunities[2]);
                Console.WriteLine($"Joined {userCommunities[2]}");
                
                StateHasChanged();
            }
            catch (SendMessageFailedException ex)
            {
                errorMessage = ex.Message;
                status = "Not connected.";
                _ = client.StopAsync();
                StateHasChanged();
                throw;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            status = "Not connected.";
            Console.WriteLine("failed");
            Console.WriteLine(errorMessage);
        }
    }


    private void OnPostLiked(string postId, bool liked)
    {
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (liked && !post.LikedBy.Contains(Username))
            {
                post.LikedBy.Add(Username);
            }
            else if (!liked && post.LikedBy.Contains(Username))
            {
                post.LikedBy.Remove(Username);
            }

            StateHasChanged();
        }
    }

    public async Task OnToggledChanged(PostDetails post, bool toggled)
    {
        Console.WriteLine("OnToggledChanged called: " + toggled);
        if (toggled)
        {
            if (!post.LikedBy.Contains(Username))
            {
                post.LikedBy.Add(Username);
                await LikePost(post.Post.Id, true);
            }
        }
        else
        {
            if (post.LikedBy.Contains(Username))
            {
                post.LikedBy.Remove(Username);
                await LikePost(post.Post.Id, false);
            }
        }

        StateHasChanged();
    }

    public async Task OnRepostedChanged(PostDetails post, bool toggled)
    {
        Console.WriteLine("OnToggledChanged called: " + toggled);
        if (toggled)
        {
            if (!post.RepostedBy.Contains(Username))
            {
                post.RepostedBy.Add(Username);
                await RepostPost(post.Post.Id, true);
            }
        }
        else
        {
            if (post.RepostedBy.Contains(Username))
            {
                post.RepostedBy.Remove(Username);
                await RepostPost(post.Post.Id, false);
            }
        }

        StateHasChanged();
    }

    public async Task OnFollowChanged(string user, bool toggled)
    {
        
        {
            if (!Following.Contains(user))
            {
                Following.Add(user);
                Follows = Following.Contains(user);
                await FollowUser(user, true);
            }
            else
            {
                Following.Remove(user);
                Follows = Following.Contains(user);
                await FollowUser(user, false);
            }

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }

        StateHasChanged();
    }


    private async Task LikePost(string postId, bool like)
    {
        Console.WriteLine($"Calling LikePost service: PostId = {postId}, Like = {like}");
        var likeStatusChanged = await PostService.OnLikePost(Username, postId);
        Console.WriteLine($"Like status changed: {likeStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyPostLiked", postId, likeStatusChanged);
    }

    private async Task RepostPost(string postId, bool repost)
    {
        Console.WriteLine($"Calling LikePost service: PostId = {postId}, Repost = {repost}");
        var repostStatusChanged = await PostService.OnSharePost(Username, postId);
        Console.WriteLine($"Repost status changed: {repostStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyPostReposted", postId, repostStatusChanged);
    }

    private async Task FollowUser(string userId, bool follow)
    {
        Console.WriteLine($"Calling LikePost service: UserId = {userId}, follow = {follow}");
        var followStatusChanged = await UserService.FollowUserAsync(Username, userId);
        Console.WriteLine($"Follow status changed: {followStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyNewFollower", userId, follow);
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private void UpdatePostLikeStatus(string postId, bool liked)
    {
        // Find the post in the posts list and update its like status
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (liked && !post.LikedBy.Contains(Username))
                post.LikedBy.Add(Username);
            else if (!liked)
                post.LikedBy.Remove(Username);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }

    private void UpdatePostRepostStatus(string postId, bool repost)
    {
        // Find the post in the posts list and update its like status
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (repost && !post.RepostedBy.Contains(Username))
                post.RepostedBy.Add(Username);
            else if (!repost)
                post.RepostedBy.Remove(Username);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }


    private async Task UpdateFeedWithNewPost(string PostId)
    {
        Console.WriteLine("===" + PostId);
        var newPost = await PostService.GetPostByIdAsync(PostId);
        Console.WriteLine(newPost.PostCreatorUsername);
        Console.WriteLine(newPost.Post.Content);
        if (newPost != null)
        {
            posts.Insert(0, newPost);
            Console.WriteLine(newPost.Post.Content);
            InvokeAsync(StateHasChanged);
            //StateHasChanged();
        }
    }

    private async Task UpdateNewFollowerStatus(string userId, bool follow)
    {
        // Find the post in the posts list and update its like status
        var user = userId;
        if (user != null)
        {
            if (follow && !Following.Contains(userId))
                Following.Add(userId);
            else if (!follow)
                Following.Remove(userId);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }



    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
    private async Task GoToPost(string postId)
    {
        NavigationManager.NavigateTo($"/p/{postId}", true);
    }
 
}
