@inject IPostService PostService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@inject IUserService UserService

@if (posts == null)
{
    <MudText Typo="Typo.body2"></MudText>
}
else
{
    @foreach (var p in posts)
    {
        if (p == null)
        {
            <MudText Typo="Typo.body2"></MudText>
        }
        else
        {
            <MudPaper Width="100%" Class="flex-none" Elevation="0">
            <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
            <MudDivider />

                <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0" >
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar>
                                <MudImage Src="../../Images/pain.png"></MudImage>
                            </MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Color="Color.Tertiary" Typo="Typo.body1">
                                <b>@p.PostCreatorDisplayName</b>
                                <MudIcon Icon="@Icons.Material.Filled.Verified" MudBlazor.Size="Size.Small" Color="Color.Info" Title="Verified User" /> 
                                &nbsp;
                            </MudText>
                            
                        </CardHeaderContent>
                        
                        <CardHeaderActions>
                                
                                    
                                <MudToggleIconButton 
                                    Toggled="@Follows" 
                                    ToggledChanged="@(toggled => OnFollowChanged(p.PostCreatorUsername, toggled))"
                                    Icon="@Icons.Material.Filled.AddCircleOutline" 
                                    Color="@Color.Secondary" 
                                    Variant="Variant.Filled" 
                                    Title="Følg" 
                                    ToggledIcon="@Icons.Material.Filled.CheckCircle" 
                                    ToggledColor="@Color.Primary" 
                                    ToggledTitle="Følger" />
                                
                                    
                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>

                    <MudCardContent>
                        @if (!string.IsNullOrEmpty(p.Post.PicturePath))
                            {
                                <MudCardMedia ObjectFit="ObjectFit.ScaleDown" Height="200" Image="@p.Post.PicturePath" />
                                @if (!string.IsNullOrEmpty(p.Post.Content))
                                {
                                    <MudText Style="white-space: pre-wrap;" Color="Color.Tertiary" Typo="Typo.body2"><b>@p.PostCreatorUsername</b> @p.Post.Content</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2"></MudText>
                                }
                            }
                        else
                            {
                                @if (!string.IsNullOrEmpty(p.Post.Content))
                                {
                                    <MudText Style="white-space: pre-wrap;" Color="Color.Tertiary" Typo="Typo.body2">@p.Post.Content</MudText>
                                }
                            }
                        
                    </MudCardContent>

                    <MudCardActions>
                        <MudText Typo="Typo.body2">@p.LikesCount</MudText>
                                <MudToggleIconButton 
                                    Toggled="@Liked" 
                                    ToggledChanged="@(toggled => OnToggledChanged(p, toggled))"
                                    Icon="@Icons.Material.Filled.FavoriteBorder" 
                                    Color="@Color.Primary" 
                                    Title="Like" 
                                    ToggledIcon="@Icons.Material.Outlined.Favorite" 
                                    ToggledColor="@Color.Primary" 
                                    ToggledTitle="Liked" /> &nbsp; &nbsp; &nbsp; &nbsp;
                        <MudText Typo="Typo.body2">@p.RepostsCount</MudText>
                        <MudToggleIconButton 
                                    Toggled="Liked" 
                                    ToggledChanged="@(toggled => OnRepostedChanged(p, toggled))"
                                    Icon="@Icons.Material.Outlined.Repeat" 
                                    Color="@Color.Default" 
                                    Title="Like" 
                                    ToggledIcon="@Icons.Material.Outlined.Repeat" 
                                    ToggledColor="@Color.Warning" 
                                    ToggledTitle="Reposted" /> &nbsp; &nbsp; &nbsp; &nbsp;
                        <MudText Typo="Typo.body2">@p.RepliesCount</MudText>
                        <MudIconButton Icon="@Icons.Material.Outlined.Comment" OnClick="@(async () => GoToPost(p.Post.Id))" Color="Color.Info" /> &nbsp; &nbsp; &nbsp; &nbsp;
                    </MudCardActions>
                </MudCard>

                </MudContainer>
                </MudPaper>
                <MudSpacer />
  
        }
    
    }
}

@code
{

    [Parameter]
    public string PostId { get; set; }
    
    private List<PostDetails> posts { get; set; }

    private List<string> Following;
    private HubConnection? hubConnection;

    public bool Liked { get; set; }
    public bool Follows { get; set; }

    private string Username;
    private int Likes;
    private int Shares;

    protected override async Task OnInitializedAsync()
    {

        posts = await PostService.GetRootPostRepliesAsync(PostId);


         // Initialize the HubConnection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/posthub"))
            .WithAutomaticReconnect()
            .Build();

        // Subscribe to the hub method here
        hubConnection.On<string>("NewPostAvailable", async (PostId) =>
        {
            Console.WriteLine("==????=");
            await UpdateFeedWithNewPost(PostId);
        });

        hubConnection.On<string, bool>("PostLiked", (postId, liked) =>
        {
            // Handle the post like update here
            // For example, updating the UI based on postId and liked status
            UpdatePostLikeStatus(postId, liked);
        });

        hubConnection.On<string, bool>("PostReposted", (postId, repost) =>
        {
            // Handle the post like update here
            // For example, updating the UI based on postId and liked status
            UpdatePostRepostStatus(postId, repost);
        });

        hubConnection.On<string, bool>("NewFollower", (userId, follow) =>
        {
            // Handle the post like update here
            // For example, updating the UI based on postId and liked status
            UpdateNewFollowerStatus(userId, follow);
        });

        await hubConnection.StartAsync();
    }



    private void OnPostLiked(string postId, bool liked)
    {
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (liked && !post.LikedBy.Contains(Username))
            {
                post.LikedBy.Add(Username);
            }
            else if (!liked && post.LikedBy.Contains(Username))
            {
                post.LikedBy.Remove(Username);
            }

            StateHasChanged();
        }
    }

    public async Task OnToggledChanged(PostDetails post, bool toggled)
    {
        Console.WriteLine("OnToggledChanged called: " + toggled);
        if (toggled)
        {
            if (!post.LikedBy.Contains(Username))
            {
                post.LikedBy.Add(Username);
                await LikePost(post.Post.Id, true);
            }
        }
        else
        {
            if (post.LikedBy.Contains(Username))
            {
                post.LikedBy.Remove(Username);
                await LikePost(post.Post.Id, false);
            }
        }

        StateHasChanged();
    }

    public async Task OnRepostedChanged(PostDetails post, bool toggled)
    {
        Console.WriteLine("OnToggledChanged called: " + toggled);
        if (toggled)
        {
            if (!post.RepostedBy.Contains(Username))
            {
                post.RepostedBy.Add(Username);
                await RepostPost(post.Post.Id, true);
            }
        }
        else
        {
            if (post.RepostedBy.Contains(Username))
            {
                post.RepostedBy.Remove(Username);
                await RepostPost(post.Post.Id, false);
            }
        }

        StateHasChanged();
    }

    public async Task OnFollowChanged(string user, bool toggled)
    {
        
        {
            if (!Following.Contains(user))
            {
                Following.Add(user);
                Follows = Following.Contains(user);
                await FollowUser(user, true);
            }
            else
            {
                Following.Remove(user);
                Follows = Following.Contains(user);
                await FollowUser(user, false);
            }

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }

        StateHasChanged();
    }


    private async Task LikePost(string postId, bool like)
    {
        Console.WriteLine($"Calling LikePost service: PostId = {postId}, Like = {like}");
        var likeStatusChanged = await PostService.OnLikePost(Username, postId);
        Console.WriteLine($"Like status changed: {likeStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyPostLiked", postId, likeStatusChanged);
    }

    private async Task RepostPost(string postId, bool repost)
    {
        Console.WriteLine($"Calling LikePost service: PostId = {postId}, Repost = {repost}");
        var repostStatusChanged = await PostService.OnSharePost(Username, postId);
        Console.WriteLine($"Repost status changed: {repostStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyPostReposted", postId, repostStatusChanged);
    }

    private async Task FollowUser(string userId, bool follow)
    {
        Console.WriteLine($"Calling LikePost service: UserId = {userId}, follow = {follow}");
        var followStatusChanged = await UserService.FollowUserAsync(Username, userId);
        Console.WriteLine($"Follow status changed: {followStatusChanged}");

        // Notify others via SignalR (this should be done on the server after confirming the like/unlike operation)
        await hubConnection.SendAsync("NotifyNewFollower", userId, follow);
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private void UpdatePostLikeStatus(string postId, bool liked)
    {
        // Find the post in the posts list and update its like status
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (liked && !post.LikedBy.Contains(Username))
                post.LikedBy.Add(Username);
            else if (!liked)
                post.LikedBy.Remove(Username);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }

    private void UpdatePostRepostStatus(string postId, bool repost)
    {
        // Find the post in the posts list and update its like status
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (repost && !post.RepostedBy.Contains(Username))
                post.RepostedBy.Add(Username);
            else if (!repost)
                post.RepostedBy.Remove(Username);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }


    private async Task UpdateFeedWithNewPost(string PostId)
    {
        Console.WriteLine("===" + PostId);
        var newPost = await PostService.GetPostByIdAsync(PostId);
        Console.WriteLine(newPost.PostCreatorUsername);
        Console.WriteLine(newPost.Post.Content);
        if (newPost != null)
        {
            posts.Insert(0, newPost);
            Console.WriteLine(newPost.Post.Content);
            InvokeAsync(StateHasChanged);
            //StateHasChanged();
        }
    }

    private async Task UpdateNewFollowerStatus(string userId, bool follow)
    {
        // Find the post in the posts list and update its like status
        var user = userId;
        if (user != null)
        {
            if (follow && !Following.Contains(userId))
                Following.Add(userId);
            else if (!follow)
                Following.Remove(userId);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }



    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
    private async Task GoToPost(string postId)
    {
        NavigationManager.NavigateTo($"/p/{postId}", true);
    }


}