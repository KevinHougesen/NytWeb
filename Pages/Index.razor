@page "/"
@using NytWeb.Models
@inject IJSRuntime js
@inject IUserService UserService
@inject IModalService modal



<PageTitle>Nyt!</PageTitle>

    <AuthorizeView>

        <NotAuthorized>


                <div class="row">

                        <div>
                            <h1 class="sitetitle">Nyt!</h1>
                        </div>



                        <div class="container container-4">
                            <div class="item item-1">
                                <h1 class="mobiletitle">Nyt!</h1>
                            </div>
                        </div>
                        <div class="col">
                            <h1 class="mainslogan">Noget nyt?</h1>
                            <h1 class="secondslogan">Tilmed dig i dag.</h1>
                        </div>
                        <div class="col">
                            <div class="item item-3">
                                <button @onclick="ShowRegisterModal" class="btn btn-primary">Tilmeld via Google</button>
                            </div>  
                            <div class="item item-4">
                                <button @onclick="ShowRegisterModal" class="btn btn-primary">Tilmeld via Apple</button>
                            </div>  
                            <div class="item item-5">
                                <button @onclick="ShowRegisterModal" class="btn btn-secondary">Opret konto</button>
                            </div>  
                            <div class="item item-6">
                                <button @onclick="ShowLoginModal" class="btn btn-rare">Login</button>
                            </div>  
                        </div>

                </div>


        </NotAuthorized>
    </AuthorizeView>
    
    <AuthorizeView>
        <Authorized>
            <MudAppBar Color="Color.Secondary" Elevation="0"  Square="true" Width="100%">
                <MudPaper Width="100%" Class="flex-none" Elevation="0">
                    <MudContainer Height="100%" MaxWidth="MaxWidth.Small" Width="100%">
                        <MudTabs Elevation="0"  Rounded="true" Centered="true" Width="100%">
                            <MudTabPanel Color="Color.Primary" Text="Dit Nyt" OnClick='() => Activate("pn_one")'>
                            </MudTabPanel>
                            <MudTabPanel Text="Dit Nyt" Color="@Color.Primary" OnClick='() => Activate("pn_two")'>
                            </MudTabPanel>
                        </MudTabs>
                    </MudContainer>
                </MudPaper>
            </MudAppBar>

                

                <MudPaper Width="100%" Class="flex-none" Elevation="0">
                    <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >

                        <MudTabs Position="Position.Bottom" Elevation="0" Rounded="true" Centered="true" Color="@Color.Secondary" @ref="tabs">
                                        
                            <MudTabPanel Text="" @ref="panel01" Height="100%" ID="@("pn_one")" >
                                <UserPost/>
                                            
                                <LoadedInNetworkFeed />
                            </MudTabPanel>

                            <MudTabPanel Color="@Color.Primary" ApplyEffectsToContainer="true" Text="" @ref="panel02" ID="@("pn_two")">
                                <UserPost/>
                                <LoadedOutNetworkFeed />
                            </MudTabPanel>

                        </MudTabs>

                    </MudContainer>
                </MudPaper>
            
        </Authorized>
    </AuthorizeView>
@code
{
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    private async Task ShowRegisterModal()
    {
        var options = new ModalOptions() 
        { 
            OverlayCustomClass = "custom-modal-overlay"
        };

        var registerModal = Modal.Show<Register>("", options);
        var result = await registerModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Confirmed)
        {
            Console.WriteLine("Modal was closed");
        }
    }
    
    
    

    private async Task ShowLoginModal()
    {
        var options = new ModalOptions() 
        { 
            OverlayCustomClass = "custom-modal-overlay" 
        };

        var loginModal = Modal.Show<Login>("", options);
        var result = await loginModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Confirmed)
        {
            Console.WriteLine("Modal was closed");
        }
    }

    MudTabs tabs;
    MudTabPanel panel01;
    MudTabPanel panel02;

    void Activate(object id)
    {
        tabs.ActivatePanel(id);
    }
}

