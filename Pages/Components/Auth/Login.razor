@page "/Login"
@inject IUserService UserService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService



<MudPaper Elevation="0" Class="d-flex align-content-center justify-center flex-wrap flex-grow-1 gap-4" Height="900px" style="background-color:#F5001D;">
    <EditForm Model="@model" >
        <DataAnnotationsValidator/>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard Elevation="0" style="background-color:#F5001D;" >
                    <MudCardContent >
                        <MudTextField Color="Color.Secondary" id="txtUsername" Id="txtUsername" Label="Brugernavn"
                                    @bind-Value="model.UserName" id="txtPassword" For="@(() => model.UserName)"/>
                        <MudTextField Label="Adgangskode" Class="mt-3"
                                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton DisableElevation="true"  MudBlazor.ButtonType="ButtonType.Submit" OnClick="OnValidSubmit" Id="btnLogin" id="btnLogin" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
    <MudIconButton Icon="@Icons.Material.Outlined.Comment" OnClick="@((e) => OpenRegister())" Color="Color.Info" />
</MudPaper>


@code
{
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    bool success;
    
    private Model model = new Model();

    async Task OpenRegister()
    {
        var dialog = await DialogService.ShowAsync<Register>("");
        var result = await dialog.Result;
    }

    private async Task OnValidSubmit()
    {
        var username = model.UserName;
        var userAccount = await UserService.GetUserAsync(username);
        Console.WriteLine(userAccount.Username);
 
        var isMatch = BCrypt.EnhancedVerify(model.Password, userAccount.Password);
        Console.WriteLine("hmm?");
        Task.Delay(1000);

        
        if (userAccount == null)
        {
            await js.InvokeVoidAsync("alert", "Invalid Username or Password");
            return;
        }
        
        else if (isMatch == false)
        {
            await js.InvokeVoidAsync("alert", "Invalid Username or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.Username,
            Role = userAccount.Role
        });
        success = true;
        StateHasChanged();
        NavigationManager.NavigateTo("/", true);
    }
}