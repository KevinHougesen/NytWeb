@page "/Login"
@inject IUserService UserService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager


    <div class="row"> 
        <div class="item-1">
            <div class ="mb-3 text-center">
                <h3 class="modaltext">Login p√• nyt!</h3>
            </div>
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator/>
                        <MudGrid>
                            <MudItem xs="12" sm="7">
                                <MudCard>
                                    <MudCardContent>
                                        <MudTextField Label="First name" HelperText="Max. 8 characters"
                                                    @bind-Value="model.UserName" For="@(() => model.UserName)"/>
                                        <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                        </EditForm>
        </div>
    </div>

@code
{
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    bool success;
    
    private Model model = new Model();

    private async Task OnValidSubmit()
    {
        var userAccount = await UserService.GetUserAsync(model.UserName);
        var isMatch = BCrypt.Net.BCrypt.EnhancedVerify(model.Password, userAccount.Password);
        if (userAccount == null)
        {
            await js.InvokeVoidAsync("alert", "Invalid Username or Password");
            return;
        }
        else if (isMatch == false)
        {
            await js.InvokeVoidAsync("alert", "Invalid Username or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.Username,
            Role = userAccount.Role
        });
        success = true;
        StateHasChanged();
        NavigationManager.NavigateTo("/", true);
    }
}