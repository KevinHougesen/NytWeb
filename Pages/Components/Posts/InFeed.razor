@inject IUserService UserService
@inject IPostService PostService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IModalService modal
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client
@using Azure.Messaging.WebPubSub
@using Websocket.Client
@using Azure.Messaging.WebPubSub.Clients


@if (user == null)
{
    <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
        <MudStack Spacing="8">
            <LoadingPost />
            <LoadingPost />
        </MudStack>
    </MudContainer>
}
else
{
    @if (posts == null)
    {
        <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
            <MudStack Spacing="8">
                <LoadingPost />
                <LoadingPost />
            </MudStack>
        </MudContainer>
    }
    else
    {
        <MudStack Row="true">
            <AvatarHead />
            <AvatarHead />
            <AvatarHead />
        </MudStack>

        @if(messages.Count == 0)
        {
            <MudPaper Width="100%">
                <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
                    <MudPaper Width="100%" Elevation="0">
                        <MudStack Row="true">
                            <AvatarHead />
                            <AvatarHead />
                            <AvatarHead />
                        </MudStack>
                    </MudPaper>
                </MudContainer>
            </MudPaper>
            <MudDivider />
        }
        else
        {
            @foreach (var message in messages)
            {


            
            <MudDivider />
        <MudSpacer />
            }
        }

        @foreach (var post in posts)
        {

            <MudPaper Width="100%" Elevation="0">

            
                <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0" id="@post.Post.Id" >

                    <PostHeader post="@post" />
                        
                    <PostContent post="@post" />
                
                    <PostFooter post="@post" /> &nbsp; &nbsp; &nbsp; &nbsp;

                </MudCard>

            <MudDivider />
        </MudPaper>
        <MudSpacer />
        
        }
    }
}


@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [CascadingParameter] 
    IModalService Modal { get; set; } = default!;

    private DotNetObjectReference<InFeed> objRef;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
    }

    async Task ShowPostModal(string postid)
    {
        var parameters = new ModalParameters
        {
            { nameof(SinglePost.PostId), postid }
        };

        var options = new ModalOptions() 
        { 
            UseCustomLayout = true,

            AnimationType = ModalAnimationType.FadeInOut
        };

        Modal.Show<SinglePost>("Passing Data", parameters, options);

    }

    string postId;
    

    



    
    private UserModel user;

    private HubConnection? hubConnection;

    private string url = string.Empty;
    private string errorMessage = string.Empty;
    private string status = "Not connected.";
    private string connectionId = string.Empty;
    private string userId = string.Empty;
    private string message = string.Empty;
    private WebPubSubClient? client = null;
    private List<GroupDataMessage> messages = new();

    private List<string> userCommunities;
    

    
    private List<PostDetails> posts;

    private List<string> Following;

    private string Username;
    public bool Liked { get; set; }

    private int Likes;

    private int Shares;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        user = await UserService.GetUserAsync(authState.User.Identity.Name);
        Username = user.Username;
        userCommunities = await UserService.GetUserCommunitiesAsync(Username);
        await Connect();

        

        if (user != null)
        {
            posts = await PostService.DisplayFeedAsync(user.Username);    
            Following = await UserService.GetUserFollowingAsync(user.Username);
        }
    }

    private async Task Connect()
    {
        if (client != null)
        {
            await client.DisposeAsync();
            client = null;
        }
        errorMessage = string.Empty;
        status = "Not connected.";
        connectionId = string.Empty;
        userId = string.Empty;
        messages.Clear();
        var uri = await AuthService.ConnectToHub(Username, userCommunities);

        client = new WebPubSubClient(new Uri(uri));
        client.Connected += args =>
        {
            status = "Connected.";
            connectionId = args.ConnectionId;
            userId = args.UserId;
            StateHasChanged();
            return Task.CompletedTask;
        };
        client.GroupMessageReceived += args =>
        {
            Console.WriteLine($"Message received: {args.Message.ToString()} count = {messages.Count()}");
            messages.Add(args.Message);
            InvokeAsync(StateHasChanged);
            StateHasChanged();
            return Task.CompletedTask;
        };
        client.Disconnected += args =>
        {
            status = "Not connected.";
            connectionId = string.Empty;
            userId = string.Empty;
            StateHasChanged();
            return Task.CompletedTask;
        };
        status = "Connecting ...";
        StateHasChanged();
        try
        {
            await client.StartAsync();
            try
            {
                foreach (var community in userCommunities)
                {
                    Console.WriteLine("Community: " + community);
                }

                await client.JoinGroupAsync(userCommunities[0]);
                Console.WriteLine($"Joined {userCommunities[0]}");

                await client.JoinGroupAsync(userCommunities[1]);
                Console.WriteLine($"Joined {userCommunities[1]}");

                await client.JoinGroupAsync(userCommunities[2]);
                Console.WriteLine($"Joined {userCommunities[2]}");
                
                StateHasChanged();
            }
            catch (SendMessageFailedException ex)
            {
                errorMessage = ex.Message;
                status = "Not connected.";
                _ = client.StopAsync();
                StateHasChanged();
                throw;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            status = "Not connected.";
            Console.WriteLine("failed");
            Console.WriteLine(errorMessage);
        }
    }


    [JSInvokable]
    public async Task OnPostViewed(string postId, int viewTimeInSeconds)
    {
        var userId = Username;
        var viewCounter = await PostService.UpdatePostViewAsync(userId, postId, viewTimeInSeconds);
        Console.WriteLine("Seconds viewed post: " + viewCounter);
    }






   

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private void UpdatePostLikeStatus(string postId, bool liked)
    {
        // Find the post in the posts list and update its like status
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (liked && !post.LikedBy.Contains(Username))
                post.LikedBy.Add(Username);
            else if (!liked)
                post.LikedBy.Remove(Username);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }

    private void UpdatePostRepostStatus(string postId, bool repost)
    {
        // Find the post in the posts list and update its like status
        var post = posts.FirstOrDefault(p => p.Post.Id == postId);
        if (post != null)
        {
            if (repost && !post.RepostedBy.Contains(Username))
                post.RepostedBy.Add(Username);
            else if (!repost)
                post.RepostedBy.Remove(Username);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }


    private async Task UpdateFeedWithNewPost(string PostId)
    {
        Console.WriteLine("===" + PostId);
        var newPost = await PostService.GetPostByIdAsync(PostId);
        Console.WriteLine(newPost.PostCreatorUsername);
        Console.WriteLine(newPost.Post.Content);
        if (newPost != null)
        {
            posts.Insert(0, newPost);
            Console.WriteLine(newPost.Post.Content);
            InvokeAsync(StateHasChanged);
            //StateHasChanged();
        }
    }

    private async Task UpdateNewFollowerStatus(string userId, bool follow)
    {
        // Find the post in the posts list and update its like status
        var user = userId;
        if (user != null)
        {
            if (follow && !Following.Contains(userId))
                Following.Add(userId);
            else if (!follow)
                Following.Remove(userId);

            // Invoke state change to refresh the UI
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && posts != null && posts.Any())
        {
            await Task.Delay(10000); // Adjust the delay as needed
            foreach (var post in posts)
            {
                await JSRuntime.InvokeVoidAsync("initializePostViewDetection", objRef, post.Post.Id, 3000);
            }
        }
    }
 
    
}