@inject IUserService UserService
@inject IPostService PostService
@page "/u/{Username}"


<ProfileAppBar />
<MudPaper Width="100%" Class="flex-none" Elevation="0">
    <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
        <MudPaper Width="100%" Class="flex-none" Elevation="0">
            <MudPaper Width="100%" Elevation="0">
                <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0">
                    <ProfileHeader Username="@Username" />
                    <ProfileActions Username="@Username" />
                    <ProfileBioContent />
                    <ProfileBioContentActions />
                </MudCard>
            </MudPaper>
                <MudTabs Elevation="0" Rounded="true">
                    <MudTabPanel Text="Opslag">
                        @if (posts == null)
                        {
                            <MudText>Der er ingen opslag at vise.</MudText>
                        }
                        else
                        {
                            @foreach (var post in posts)
                            {
                                <MudPaper Width="100%" Elevation="0">
                                    <MudCard Width="100%" Height="100%" Color="Color.Background" href="#" Elevation="0" id="@post.Post.Id">
                                        <PostHeader post="@post" />
                                        <PostContent post="@post" />
                                        <PostFooter post="@post" /> &nbsp; &nbsp; &nbsp; &nbsp;
                                    </MudCard>
                                    <MudDivider />
                                </MudPaper>
                            }
                        }
                    </MudTabPanel>
                    <MudTabPanel Text="Medier">
                        <MudGrid Spacing="4">
                            @if (!string.IsNullOrEmpty(LongToken))
                            {
                                @foreach (var instaPic in mediaUrl)
                                {
                                    <MudItem>
                                        <MudLink Href="#" Underline="Underline.None">
                                            <MudPaper Height="120px" Width="120px">
                                                <MudImage Width="120" Height="120" ObjectFit="ObjectFit.Cover" Src="@instaPic" Elevation="0" Class="rounded-lg" />
                                            </MudPaper>
                                        </MudLink>
                                    </MudItem>
                                }
                            }
                            @if (posts == null)
                            {
                                <MudGrid Spacing="4">
                                    @for (int i = 0; i < 8; i++)
                                    {
                                        <MudItem>
                                            <MudPaper Height="120px" Width="120px" />
                                        </MudItem>
                                    }
                                </MudGrid>
                            }
                            else
                            {
                                @foreach (var post in posts)
                                {
                                    if (!string.IsNullOrEmpty(post.Post.PicturePath))
                                    {
                                        <MudItem>
                                            <MudLink Href="#" Underline="Underline.None">
                                                <MudPaper Height="120px" Width="120px">
                                                    <MudImage Width="120" Height="120" ObjectFit="ObjectFit.Cover" Src="@post.Post.PicturePath" Elevation="0" Class="rounded-lg" />
                                                </MudPaper>
                                            </MudLink>
                                        </MudItem>
                                    }
                                }
                            }
                        </MudGrid>
                    </MudTabPanel>
                </MudTabs>
            <MudSpacer />
        </MudPaper>
    </MudContainer>
</MudPaper>

@code
{
    [Parameter]
    public string Username { get; set; }

    List<string> Followers;
    List<string> Following;

    List<PostDetails> posts;
    List<InstagramMediaData> medias { get; set; } = new();
    List<InstagramMediaData> albumMedias { get; set; } = new();
    List<string> mediaUrl { get; set; } = new();
    string LongToken;

    protected override async Task OnInitializedAsync()
    {

        Followers = await UserService.GetUserFollowersAsync(Username);
        Following = await UserService.GetUserFollowingAsync(Username);
        posts = await PostService.GetUserPostsAsync(Username);    

        UserModel user = await UserService.GetUserAsync(Username);

        if (!string.IsNullOrEmpty(user.InstaToken))
        {
            LongToken = user.InstaToken;
            Console.WriteLine($"User Token: {LongToken}");
        };

        await GetMediaAsync();
    }

    private async Task GetMediaAsync()
    {
        if (!string.IsNullOrEmpty(LongToken))
        {
            var MediaContent = await UserService.GetUserInstaMediaAsync(LongToken);
            foreach (var media in MediaContent.Data)
            {
                Console.WriteLine($"ID: {media.Id}, Caption: {media.Caption}");
                var Medias = await UserService.GetUserInstaMediaDataAsync(media.Id, LongToken);
                medias.Add(Medias);
                
            };
            await GetMediaContent();
        };
    }

    private async Task GetMediaContent()
    {
        foreach ( var file in medias )
        {
            if (file.MediaType == "CAROUSEL_ALBUM")
            {
                var albumContent = await UserService.GetUserInstaMediaAlbumChildrenAsync(file.Id, LongToken);
                foreach (var albumImg in albumContent.Data)
                {
                    var AlbumMedias = await UserService.GetUserInstaMediaDataAsync(albumImg.Id, LongToken);
                    albumMedias.Add(AlbumMedias);
                };
                foreach ( var photo in albumMedias )
                {
                    string fixedUrl = photo.MediaUrl.Replace("\\/", "/");
                    mediaUrl.Add(fixedUrl);
                    Console.WriteLine("Link:" + fixedUrl);
                };
            };

            if (file.MediaType == "IMAGE")
            {
                mediaUrl.Add(file.MediaUrl);
            };
        };
        
    }
}