@using System.IO
@using System.Text
@using System.Threading
@using FluentValidation

@inject ISnackbar Snackbar

@inject IUserService UserService
@inject IAuthService AuthService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager

<MudPaper Elevation="0" Class="d-flex align-content-center justify-center flex-wrap flex-grow-1 gap-4" Height="420px">
    <MudStack Row="true" Spacing="12">
        <MudAvatar Style="height:300px; width:300px;" Image="../../Images/pain.png" />
        <MudDivider Vertical="true" FlexItem="true" />
        <MudPaper Elevation="0" Class="d-flex align-content-center justify-center flex-wrap flex-grow-1 gap-4">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="8">
                <MudForm Model="@_model"
                        @bind-IsValid="_isValid"
                        @bind-IsTouched="_isTouched"
                        Validation="@_validationRules.ValidateValue">
                    <MudItem xs="12">
                        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                    AppendMultipleFiles
                                    @bind-Files="_model.Files"
                                    @bind-Files:after="@ClearDragClass"
                                    For="@(() => _model.Files)"
                                    Hidden="@false"
                                    InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                                    InputStyle="opacity:0"
                                    @ondragenter="@SetDragClass"
                                    @ondragleave="@ClearDragClass"
                                    @ondragend="@ClearDragClass">
                            <ButtonTemplate>
                                <MudPaper Height="240px"
                                        Outlined="true"
                                        Class="@_dragClass">
                                    <MudText Typo="Typo.h6">Trænger du til et nyt profilbillede?</MudText>
                                    <MudText Typo="Typo.h6">Klik eller smid det ind her!</MudText>
                                    @foreach (var file in _model.Files?.Select(file => file.Name) ?? Enumerable.Empty<string>())
                                    {
                                        <MudChip Color="Color.Dark"
                                                Text="@file" />
                                    }
                                </MudPaper>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudItem>
                </MudForm>
                <MudDivider />
                <MudFab Color="Color.Info" StartIcon="@Icons.Material.Outlined.Image" Label="Tilføj nyt profilbillede" />
            </MudStack>
        </MudPaper>
    </MudStack>
</MudPaper>

@code {
#nullable enable
    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private Model _model =  new();
    private ModelFluentValidator _validationRules = new();
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = "this is content";
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator()
        {
            RuleFor(x => x.Files)
                .NotEmpty()
                .WithMessage("There must be at least 1 file.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}