@inject IUserService UserService
@inject IPostService PostService
@inject NavigationManager NavigationManager

@if (user == null)
{
    <LoadingPost />
    <LoadingPost />
    <LoadingPost />
}
else
{
    @if (posts == null)
    {
        <LoadingPost />
        <LoadingPost />
        <LoadingPost />
    }
    else
    {
        @foreach (var post in posts)
        {
            <MudDivider />
            <MudCard Width="100%" Height="100%" Color="Color.Background" Elevation="0" >
                
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar>
                                <MudImage Src="../../Images/pain.png"></MudImage>
                            </MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudBadge Origin="Origin.CenterRight" Color="Color.Info" Bordered="true" Icon="@Icons.Material.Filled.Star">
                                <MudText Typo="Typo.body1">@post.DisplayName &nbsp;</MudText>
                            </MudBadge>
                            <MudText Typo="Typo.body2">&#64;@post.Username</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.MoreVert"  Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardMedia ObjectFit="ObjectFit.Contain" Height="640" Image="../../Images/pain.png" />
                    <MudButton OnClick="@(async () => await GoToPost(@post.Id))" Color="Color.Default">
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@post.Content</MudText>
                    </MudCardContent>
                    </MudButton>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                    </MudCardActions>
                
            </MudCard>
            <MudSpacer />
        }
    }
}


@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    
    private UserModel user;

    
    private List<PostModel> posts;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        user = await UserService.GetUserAsync(authState.User.Identity.Name);
        //user = users.FirstOrDefault(i => i.Id == );

        if (user == null)
        {
            Console.WriteLine("Has either not logged or not been authenticated yet.");
            return;
        }
        else
        {
            Console.WriteLine("Retrieving feed.");
        }

        posts = await PostService.DisplayFeedAsync(user.Username);

        return;
    }
    
    private async Task GoToPost(string postId)
    {
        NavigationManager.NavigateTo($"/p/{postId}");
    }
    
}