@inject IUserService UserService
@inject IAuthService AuthService
@inject IBlobService BlobService
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@using FileManager

<MudPaper Elevation="0" Class="d-flex align-content-center justify-center flex-wrap flex-grow-1 gap-4" Height="560px">
    @if (_processing)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Large" Color="Color.Primary" Indeterminate="true"/>
    }
    else
    {
        <MudText Color="Color.Tertiary" Typo="Typo.h5">Trin @step ud af 4</MudText>
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudGrid>
            <MudItem xs="10">
            
                <MudText Color="Color.Tertiary" Typo="Typo.h3">Opret din konto</MudText>
                
                    
                    <MudSpacer />
                    <MudCard Elevation="0">
                        <MudSpacer />

                        <MudCardContent>
                        @if (!emailLoaded)
                        {
                            <MudTextField Label="Email" Color="Color.Tertiary" HelperText="Please provide your correct email" Variant="Variant.Outlined"
                                        @bind-Value="model.Email" For="@(() => model.Email)"/>
                    
                            <MudTextField Label="Display name" Color="Color.Tertiary" HelperText="Max. 8 characters" Variant="Variant.Outlined"
                                        @bind-Value="model.DisplayName" For="@(() => model.DisplayName)"/>
                        }
                        @if (!userLoaded && emailLoaded)
                        {
                            <MudTextField Label="User name" Color="Color.Tertiary" HelperText="Max. 8 characters" Variant="Variant.Outlined"
                                        @bind-Value="model.Username" For="@(() => model.Username)"/>
                        
                            <MudTextField Label="Password" Color="Color.Tertiary" HelperText="Choose a strong password" Variant="Variant.Outlined"
                                        @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>

                            <MudTextField Label="Repeat Password" Color="Color.Tertiary" HelperText="Please repeat your password" Variant="Variant.Outlined"
                                        @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>

                            <MudStack Row="true">
                                <MudSelect Dense="true" T="string" Label="Måned" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@("Januar")" />
                                    <MudSelectItem Value="@("Februar")" />
                                    <MudSelectItem Value="@("Marts")" />
                                    <MudSelectItem Value="@("April")" />
                                    <MudSelectItem Value="@("Maj")" />
                                    <MudSelectItem Value="@("Juni")" />
                                    <MudSelectItem Value="@("Juli")" />
                                    <MudSelectItem Value="@("August")" />
                                    <MudSelectItem Value="@("September")" />
                                    <MudSelectItem Value="@("Oktober")" />
                                    <MudSelectItem Value="@("November")" />
                                    <MudSelectItem Value="@("December")" />
                                </MudSelect>

                                <MudSelect Dense="true" T="int" Label="Dag" Variant="Variant.Outlined">
                                    @foreach (var day in days)
                                    {
                                    <MudSelectItem Value="@day" />
                                    }
                                </MudSelect>

                                <MudSelect Dense="true" T="int" Label="År" Variant="Variant.Outlined">
                                    @for (int i = 0; i < 12; i++)
                                    {
                                        years.Add(currentYear);
                                        currentYear -= 1;
                                    }

                                    @foreach (var year in years)
                                    {
                                        <MudSelectItem Value="@year" />
                                    }
                                
                                </MudSelect>
                            </MudStack>
                        }
                        </MudCardContent>
                        <MudCardActions>
                            @if (registerLoaded)
                            {

                                <UploadImage Model="@fileModel" />

                                <MudButton MudBlazor.ButtonType="ButtonType.Submit" OnClick="OnValidSubmit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                            }
                            else
                            {
                                <MudButton OnClick="ProcessSomething" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Fortsæt</MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
            </MudItem>
        </MudGrid>
        </EditForm>
    }
</MudPaper>

@code 
{
    private FileModel fileModel = new();

    bool success;

    private bool _processing = false;
    private bool emailLoaded = false;
    private bool userLoaded = false;
    private bool registerLoaded = false;
    private int[] days = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };

    private int maxAllowedSize = 10 * 1024 * 1024; // 10 MB
    int step = 1;
    int currentYear = DateTime.Now.Year;
    private List<int> years = new();
    
    private UserModel model = new();
    
    async Task ProcessSomething()
    {
        if (model.Email != null && model.DisplayName != null)
        {
            emailLoaded = true;
            step += 1;
        }
        if (model.Username != null && model.Password != null)
        {
            userLoaded = true;
            step += 1;
        }
        if (emailLoaded && userLoaded)
        {
            registerLoaded = true;
        }
        
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }
    
    private async Task OnValidSubmit()
    {
        Console.WriteLine("Click");
        var userAccount = await UserService.GetUserAsync(model.Username);
        if (userAccount != null)
        {
            await js.InvokeVoidAsync("alert", "Username already taken");
            return;
        }

        string blobUrl = null;
        if (fileModel.File != null)
        {
            Console.WriteLine("Image is attached");
            try
            {
                Console.WriteLine("Trying to upload...");
                var stream = fileModel.File.OpenReadStream(maxAllowedSize);
                blobUrl = await BlobService.UploadBlobFilesAsync(stream, fileModel.File.Name, fileModel.File.ContentType, model.Username);
                Snackbar.Add($"File uploaded successfully: {blobUrl}", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error during file upload: {ex.Message}", Severity.Error);
                return; // Abort the submit if file upload fails
            }
        }

        if (string.IsNullOrEmpty(blobUrl))
        {
            blobUrl = "../../Images/nopic.jpg";
            Console.WriteLine("No Image Attached.");
        }
        
        var newUser = await AuthService.RegisterAsync(model, blobUrl);

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = newUser.Username,
            Role = newUser.Role
        });

        success = true;
        StateHasChanged();
        NavigationManager.NavigateTo("/", true);
    }
}