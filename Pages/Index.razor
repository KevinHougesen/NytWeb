@page "/"
@using NytWeb.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject IUserService UserService
@inject IModalService modal
@inject IDialogService DialogService
@attribute [Authorize(Roles = "admin, User")]



<PageTitle>Dit / Nyt!</PageTitle>




<AuthorizeView>
    <Authorized>

        <MudAppBar Elevation="0"  Square="true" Width="100%" WrapContent="true" >
            <MudPaper Width="100%" Class="flex-none" Elevation="0">
                <MudContainer Height="100%" MaxWidth="MaxWidth.Small" Width="100%">
                    <MudStack Row="true" Spacing="8">
                        <h1 class="appbar">Nyt!</h1>
                        <MudTabs Elevation="0"  Rounded="true" Centered="true" Width="100%">
                            <MudTabPanel Color="Color.Primary" Typo="Typo.subtitle2" Text="Dit Nyt" OnClick='() => Activate("pn_one")'>
                            </MudTabPanel>
                            <MudTabPanel Text="Lokalt Nyt" Color="@Color.Primary" OnClick='() => Activate("pn_two")'>
                            </MudTabPanel>
                        </MudTabs>
                    </MudStack>
                </MudContainer>
            </MudPaper>
        </MudAppBar>

            <MudPaper Width="100%" Color="Color.Secondary" Class="flex-none" Elevation="0">
                <MudContainer Height="100%" Elevation="0" MaxWidth="MaxWidth.Small" Width="100%" >
                    <MudTabs Position="Position.Bottom" Elevation="0" Rounded="true" Centered="true" Color="@Color.Secondary" @ref="tabs">
                                    
                        <MudTabPanel Text="" @ref="panel01" Height="100%" ID="@("pn_one")" >

                            <InFeed />
                        </MudTabPanel>
                        <MudTabPanel Color="@Color.Primary" ApplyEffectsToContainer="true" Text="" @ref="panel02" ID="@("pn_two")">
                            <LoadedOutNetworkFeed />
                        
                        </MudTabPanel>
                    </MudTabs>
                </MudContainer>
            </MudPaper>
            
        
    </Authorized>

    <NotAuthorized>
            <MudPaper Height="960px" style="background-color:#F5001D;" Class="d-flex align-content-center justify-center flex-wrap flex-grow-1 gap-4">        
                <MudGrid Spacing="4" Justify="Justify.Center">
                    <MudItem xs="12" sm="6" md="4">
                        <MudText style="color:white; 
                            -webkit-text-fill-color: white;
                            paint-order: stroke fill;
                            -webkit-text-stroke-width: 1rem;
                            -webkit-text-stroke-color: black;" Typo="Typo.h1" Align="Align.Center">Nyt!</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6" md="4">

                            <MudStack>
                                <MudText Typo="Typo.h2" Align="Align.Center">Brug for noget nyt?</MudText>
                                <MudText Typo="Typo.h2" Align="Align.Center">Find det her!</MudText>
                                <MudButton Variant="Variant.Filled">Login med Fb</MudButton>
                                <MudButton Variant="Variant.Filled">Login med Google</MudButton>
                                <MudButton Variant="Variant.Filled">Register</MudButton>
                                <MudButton @onclick="@(async () => OpenLogin() )" Variant="Variant.Filled">Login</MudButton>
                            </MudStack>

                    </MudItem>
                    
                </MudGrid>
            </MudPaper>
    </NotAuthorized>
</AuthorizeView>

@code
{

    private bool dataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var code = query.Get("code");

        if (!string.IsNullOrEmpty(code))
        {
            // Code found, now you can store it or use it

            Console.WriteLine($"Instagram code: {code}");

            var token = await UserService.GetUserInstaTokenAsync(code);
            var Token = token.AccessToken;
            Console.WriteLine("Short Token: " + Token);

            var longToken = await UserService.GetUserInstaLongTokenAsync(Token);
            var LongToken = longToken.AccessToken;

            var MediaContent = await UserService.GetUserInstaMediaAsync(Token);
            

        }

        await base.OnInitializedAsync();
    }


    [CascadingParameter] IModalService Modal { get; set; } = default!;

    private async Task ShowRegisterModal()
    {
        var options = new ModalOptions() 
        { 
            OverlayCustomClass = "custom-modal-overlay"
        };

        var registerModal = Modal.Show<Register>("", options);
        var result = await registerModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Confirmed)
        {
            Console.WriteLine("Modal was closed");
        }
    }

    private void OpenLogin()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Login>("", options);
    }
    
    
    

    private async Task ShowLoginModal()
    {
        var options = new ModalOptions() 
        { 
            OverlayCustomClass = "custom-modal-overlay" 
        };

        var loginModal = Modal.Show<Login>("", options);
        var result = await loginModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Confirmed)
        {
            Console.WriteLine("Modal was closed");
        }
    }

    

    MudTabs tabs;
    MudTabPanel panel01;
    MudTabPanel panel02;

    void Activate(object id)
    {
        tabs.ActivatePanel(id);
    }
}

